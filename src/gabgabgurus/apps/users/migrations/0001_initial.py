# Generated by Django 4.2.6 on 2023-11-09 05:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gabgabgurus.apps.users.models
import gabgabgurus.common.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("hobbies", "0001_initial"),
        ("languages", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                ("email", models.EmailField(max_length=254, unique=True, verbose_name="email")),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        default="",
                        upload_to=gabgabgurus.apps.users.models.avatar_upload_to,
                        validators=[
                            gabgabgurus.common.validators.MaxFileWeightValidator(102400),
                            gabgabgurus.common.validators.MaxImageSizeValidator(
                                limit_height=600, limit_width=600
                            ),
                        ],
                        verbose_name="avatar",
                    ),
                ),
                (
                    "about_me",
                    models.TextField(blank=True, default="", max_length=1000, verbose_name="about me"),
                ),
                (
                    "blocked_users",
                    models.ManyToManyField(
                        blank=True, related_name="blocked_by", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="languages.country",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                ("hobbies", models.ManyToManyField(blank=True, related_name="users", to="hobbies.hobby")),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
    ]
